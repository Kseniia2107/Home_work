{
	"info": {
		"_postman_id": "40d2e055-031d-4374-92f4-b2f2729039d9",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request \r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Kseniia\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(+jsonData.age).to.eql(31);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"// let req = pm.request.url.query.toObject ();\r",
							"// let req = JSON.parse(request.body);\r",
							"let req = pm.request.body.formdata.toObject()\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_req\", function () {\r",
							"pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age_req\", function () {\r",
							"pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary_req\", function () {\r",
							"pm.expect(+req.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"let fam = jsonData.family\r",
							"console.log(fam)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_15 = jsonData.family.u_salary_1_5_year\r",
							"let salary_4 = req.salary*4\r",
							"\r",
							"pm.test(\"salary_1_5_year\", function () {\r",
							"    pm.expect(salary_15).to.eql(salary_4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kseniia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.body.formdata.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"let fam = jsonData.family\r",
							"console.log(fam)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.include(\"Luky\")\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age_4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.deep.equal(4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kseniia",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kseniia&age=31&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kseniia"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject ();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"let request_salary = req.salary\r",
							"console.log(request_salary);\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"let response_salary = jsonData.salary\r",
							"console.log(response_salary);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_0 = jsonData.salary[0]\r",
							"console.log(salary_0)\r",
							"\r",
							"// / Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_1 = jsonData.salary[1]\r",
							"console.log(salary_1)\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_2 = jsonData.salary[2]\r",
							"console.log(salary_2)\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_0\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// let salary_2 = req.salary*2\r",
							"pm.test(\"Salary_1\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"let envir_name = req.name\r",
							"pm.environment.set(\"name\", envir_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"let envir_age = req.age\r",
							"pm.environment.set(\"age\", envir_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"let envir_salary = req.salary\r",
							"pm.environment.set(\"salary\", envir_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let item_1 = jsonData.salary\r",
							"for (let i = 500; i < item_1.length; i++) {\r",
							"\tconsole.log(item_1[i]); \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kseniia",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kseniia&age=31&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kseniia"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// // Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.body.formdata.toObject()\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Item_1\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary')\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Item_2\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Item_3\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Item_4\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Item_5\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Item_5\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Item_6\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.equal(+req.salary)\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Item_7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.equal(req.salary*2)\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Item_8\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.equal(req.salary*2.7)\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Item_9\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.equal(req.salary*3.3)\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Item_10\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.equal(req.salary*3.8)\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Item_11\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.equal(+req.salary)\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Item_12\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.equal(+req.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Item_13\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.equal(req.salary*4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let item = jsonData.person\r",
							"for (let i in item) {\r",
							"console.log(i + \":\" + item[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}